AWSTemplateFormatVersion: "2010-09-09"
Description: CloudWatch Dashboard for RunsOn stack monitoring

Parameters:
  StackName:
    Type: String
    Description: Name of the parent RunsOn stack
    
  LogGroupName:
    Type: String
    Description: Log group name from the parent stack
    
  DashboardName:
    Type: String
    Description: Name for the CloudWatch dashboard
    Default: RunsOn-Operations-Dashboard
    
  QueueName:
    Type: String
    Description: Name of the SQS queue to monitor

Resources:
  RunsOnDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Ref DashboardName
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/SQS", "ApproximateNumberOfMessagesVisible", "QueueName", "${QueueName}" ]
                ],
                "period": 300,
                "stat": "Maximum",
                "region": "${AWS::Region}",
                "title": "Jobs Currently Queued",
                "view": "timeSeries"
              }
            },
            {
              "type": "log",
              "x": 8,
              "y": 0,
              "width": 8,
              "height": 6,
              "properties": {
                "query": "SOURCE '${LogGroupName}'\n| filter message like /ðŸŽ‰ Runner scheduled successfully/\n| stats count() as RunnersScheduled",
                "region": "${AWS::Region}",
                "title": "Total Runners Scheduled (Current Period)",
                "view": "table"
              }
            },
            {
              "type": "log",
              "x": 16,
              "y": 0,
              "width": 8,
              "height": 6,
              "properties": {
                "query": "SOURCE '${LogGroupName}'\n| fields @timestamp\n| filter message like /ðŸŽ‰ Runner scheduled successfully/\n| stats count() as RunnersScheduled by bin(5m)\n| sort @timestamp asc",
                "region": "${AWS::Region}",
                "title": "Runners Scheduled over time (5min intervals)",
                "view": "timeSeries"
              }
            },
            {
              "type": "log",
              "x": 0,
              "y": 6,
              "width": 8,
              "height": 6,
              "properties": {
                "query": "SOURCE '${LogGroupName}'\n| filter message like /Posted .* of workflow usage/\n| stats count() as Count by job_conclusion\n| sort Count desc",
                "region": "${AWS::Region}",
                "title": "Completed Jobs by Conclusion",
                "view": "stackedArea"
              }
            },
            {
              "type": "log",
              "x": 8,
              "y": 6,
              "width": 4,
              "height": 6,
              "properties": {
                "query": "SOURCE '${LogGroupName}'\n| fields @timestamp, tokens, burst\n| filter metric_type = \"rate_limiter\" and limiter = \"ec2_read\"\n| stats avg(tokens) as avg_tokens, avg(burst) as avg_burst by bin(5m)\n| sort @timestamp asc",
                "region": "${AWS::Region}",
                "title": "EC2 Read",
                "view": "timeSeries",
                "yAxis": {
                  "left": {
                    "min": 0
                  }
                }
              }
            },
            {
              "type": "log",
              "x": 12,
              "y": 6,
              "width": 4,
              "height": 6,
              "properties": {
                "query": "SOURCE '${LogGroupName}'\n| fields @timestamp, tokens, burst\n| filter metric_type = \"rate_limiter\" and limiter = \"ec2_run\"\n| stats avg(tokens) as avg_tokens, avg(burst) as avg_burst by bin(5m)\n| sort @timestamp asc",
                "region": "${AWS::Region}",
                "title": "EC2 Run",
                "view": "timeSeries",
                "yAxis": {
                  "left": {
                    "min": 0
                  }
                }
              }
            },
            {
              "type": "log",
              "x": 16,
              "y": 6,
              "width": 4,
              "height": 6,
              "properties": {
                "query": "SOURCE '${LogGroupName}'\n| fields @timestamp, tokens, burst\n| filter metric_type = \"rate_limiter\" and limiter = \"ec2_terminate\"\n| stats avg(tokens) as avg_tokens, avg(burst) as avg_burst by bin(5m)\n| sort @timestamp asc",
                "region": "${AWS::Region}",
                "title": "EC2 Terminate",
                "view": "timeSeries",
                "yAxis": {
                  "left": {
                    "min": 0
                  }
                }
              }
            },
            {
              "type": "log",
              "x": 20,
              "y": 6,
              "width": 4,
              "height": 6,
              "properties": {
                "query": "SOURCE '${LogGroupName}'\n| fields @timestamp, tokens, burst\n| filter metric_type = \"rate_limiter\" and limiter = \"ec2_mutating\"\n| stats avg(tokens) as avg_tokens, avg(burst) as avg_burst by bin(5m)\n| sort @timestamp asc",
                "region": "${AWS::Region}",
                "title": "EC2 Mutating",
                "view": "timeSeries",
                "yAxis": {
                  "left": {
                    "min": 0
                  }
                }
              }
            },
            {
              "type": "log",
              "x": 0,
              "y": 12,
              "width": 4,
              "height": 6,
              "properties": {
                "query": "SOURCE '${LogGroupName}'\n| fields @timestamp, tokens, burst\n| filter metric_type = \"rate_limiter\" and limiter = \"s3\"\n| stats avg(tokens) as avg_tokens, avg(burst) as avg_burst by bin(5m)\n| sort @timestamp asc",
                "region": "${AWS::Region}",
                "title": "S3 API",
                "view": "timeSeries",
                "yAxis": {
                  "left": {
                    "min": 0
                  }
                }
              }
            },
            {
              "type": "log",
              "x": 4,
              "y": 12,
              "width": 4,
              "height": 6,
              "properties": {
                "query": "SOURCE '${LogGroupName}'\n| fields @timestamp, tokens, burst\n| filter metric_type = \"rate_limiter\" and limiter = \"github\"\n| stats avg(tokens) as avg_tokens, avg(burst) as avg_burst by bin(5m)\n| sort @timestamp asc",
                "region": "${AWS::Region}",
                "title": "GitHub API",
                "view": "timeSeries",
                "yAxis": {
                  "left": {
                    "min": 0
                  }
                }
              }
            },
            {
              "type": "log",
              "x": 8,
              "y": 12,
              "width": 16,
              "height": 6,
              "properties": {
                "query": "SOURCE '${LogGroupName}'\n| filter level = \"error\"\n| fields @timestamp, message\n| sort @timestamp desc\n| limit 50",
                "region": "${AWS::Region}",
                "title": "Recent Error Messages (Latest 50)",
                "view": "table"
              }
            },
            {
              "type": "log",
              "x": 0,
              "y": 18,
              "width": 12,
              "height": 6,
              "properties": {
                "query": "SOURCE '${LogGroupName}'\n| fields @timestamp, queued, scheduled, in_progress, completed, interrupted\n| filter metric_type = \"jobs_summary\"\n| stats latest(queued) as queued, latest(scheduled) as scheduled, latest(in_progress) as in_progress, latest(completed) as completed, latest(interrupted) as interrupted by bin(5m)\n| sort @timestamp asc",
                "region": "${AWS::Region}",
                "title": "Job Status Summary",
                "view": "timeSeries"
              }
            },
            {
              "type": "log",
              "x": 12,
              "y": 18,
              "width": 12,
              "height": 6,
              "properties": {
                "query": "SOURCE '${LogGroupName}'\n| fields @timestamp, org, app_environment as env, pool_name, hot, stopped, ready, warming, ready_to_stop, detached, dangling, outdated, error\n| filter metric_type = \"pool_instances\"\n| stats min(ready) as ready, min(hot) as hot, min(stopped) as stopped, min(warming) as warming, min(ready_to_stop) as ready_to_stop, min(detached) as detached, min(dangling) as dangling, min(outdated) as outdated, min(error) as error by bin(5m), env, org, pool_name\n| sort bin, env asc, org asc, pool_name asc",
                "region": "${AWS::Region}",
                "title": "Pool Instances by State (Current)",
                "view": "table"
              }
            },
            {
              "type": "log",
              "x": 0,
              "y": 24,
              "width": 12,
              "height": 6,
              "properties": {
                "query": "SOURCE '${LogGroupName}'\n| fields @timestamp, pool_name, hot, stopped, ready\n| filter metric_type = \"pool_instances\"\n| stats latest(hot) as hot, latest(stopped) as stopped, latest(ready) as ready by pool_name, bin(5m)\n| sort @timestamp asc",
                "region": "${AWS::Region}",
                "title": "Pool Instances Over Time (Hot/Stopped/Ready)",
                "view": "timeSeries"
              }
            },
            {
              "type": "log",
              "x": 12,
              "y": 24,
              "width": 12,
              "height": 6,
              "properties": {
                "query": "SOURCE '${LogGroupName}'\n| fields @timestamp, active, interruption_count\n| filter metric_type = \"spot_circuit_breaker\"\n| stats latest(active) as circuit_breaker_active, latest(interruption_count) as interruptions by bin(5m)\n| sort @timestamp asc",
                "region": "${AWS::Region}",
                "title": "Spot Circuit Breaker Status",
                "view": "timeSeries"
              }
            },
            {
              "type": "log",
              "x": 0,
              "y": 30,
              "width": 12,
              "height": 6,
              "properties": {
                "query": "SOURCE '${LogGroupName}'\n| fields @timestamp, deliveries_redelivered, deliveries_failed, deliveries_scanned, deliveries_ignored\n| filter metric_type = \"webhook_redelivery_summary\" and ispresent(@message)\n| stats sum(deliveries_redelivered) as TotalRedelivered, sum(deliveries_failed) as TotalFailed, sum(deliveries_scanned) as TotalScanned, sum(deliveries_ignored) as TotalIgnored by bin(5m)\n| sort @timestamp asc",
                "region": "${AWS::Region}",
                "title": "Webhook Redeliveries (Last 24h)",
                "view": "table",
                "stacked": false
              }
            },
            {
              "type": "log",
              "x": 12,
              "y": 30,
              "width": 12,
              "height": 6,
              "properties": {
                "query": "SOURCE '${LogGroupName}'\n| fields @timestamp, deliveries_redelivered\n| filter metric_type = \"webhook_redelivery_summary\" and ispresent(@message)\n| stats sum(deliveries_redelivered) as Redelivered by bin(5m)\n| sort @timestamp asc",
                "region": "${AWS::Region}",
                "title": "Webhook Redeliveries Over Time",
                "view": "timeSeries",
                "stacked": false
              }
            },
            {
              "type": "log",
              "x": 0,
              "y": 36,
              "width": 24,
              "height": 6,
              "properties": {
                "query": "SOURCE '${LogGroupName}'\n| filter metric_type = \"webhook_redelivery_success\" and ispresent(@message)\n| fields @timestamp, delivery_id, event, action, original_status_code\n| sort @timestamp desc\n| limit 20",
                "region": "${AWS::Region}",
                "title": "Recent Webhook Redeliveries",
                "view": "table"
              }
            },
            {
              "type": "log",
              "x": 0,
              "y": 42,
              "width": 12,
              "height": 6,
              "properties": {
                "query": "SOURCE '${LogGroupName}'\n| filter metric_type = \"job_event\" and ispresent(queue_duration_seconds)\n| stats pct(queue_duration_seconds, 90) as P90, pct(queue_duration_seconds, 50) as P50 by bin(5m)\n| sort @timestamp asc",
                "region": "${AWS::Region}",
                "title": "Queue Duration Percentiles (P50/P90)",
                "view": "timeSeries",
                "yAxis": {
                  "left": {
                    "min": 0,
                    "label": "Seconds"
                  }
                }
              }
            }
          ]
        }

Outputs:
  DashboardURL:
    Description: URL to the CloudWatch Dashboard
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${DashboardName}"
    
  DashboardName:
    Description: Name of the created dashboard
    Value: !Ref DashboardName